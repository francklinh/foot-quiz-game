// src/pages/Top10.tsx
import { useEffect, useRef, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { AutocompleteInput } from "../components/AutocompleteInput";
import { supabase } from "../lib/supabase";
import { CerisesService } from "../services/cerises.service";
import { MultiplayerChallengesService } from "../services/multiplayer-challenges.service";
import { useChallenge } from "../hooks/useChallenge";

// Fonction utilitaire pour obtenir l'utilisateur connect√© via API
// const getCurrentUser = async () => {
//   const { data: { user }, error } = await supabase.auth.getUser();
//   if (error || !user) {
//     throw new Error('User not authenticated');
//   }
//   return user;
// };

// --- Types DB ---
// type ThemeRow = { id: string; slug: string; title: string };
type ThemeAnswerRow = { 
  answer: string; 
  answer_norm: string;
  ranking?: number;
  points?: number;
  goals?: number;
  assists?: number;
  value?: number;
  players?: {
    nationality?: string;
  };
};
type LeaderboardRow = { final_score: number; answers_count: number; ended_at: string };

type Feedback = { type: "ok" | "error" | "info"; msg: string };

// --- Helper: normalisation ---
function normalize(s: string) {
  return s
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase()
    .trim()
    .replace(/\s+/g, " ");
}

// --- Helper: Drapeaux ---
const COUNTRY_FLAGS: Record<string, string> = {
  // Codes √† 3 lettres
  'FRA': 'üá´üá∑', 'ESP': 'üá™üá∏', 'BRA': 'üáßüá∑', 'ARG': 'üá¶üá∑',
  'GER': 'üá©üá™', 'ENG': 'üá¨üáß', 'POR': 'üáµüáπ', 'ITA': 'üáÆüáπ',
  'NED': 'üá≥üá±', 'NLD': 'üá≥üá±', 'BEL': 'üáßüá™', 'NOR': 'üá≥üá¥', 'EGY': 'üá™üá¨',
  'NGA': 'üá≥üá¨', 'CAN': 'üá®üá¶', 'USA': 'üá∫üá∏', 'CHI': 'üá®üá±',
  'UKR': 'üá∫üá¶', 'POL': 'üáµüá±', 'SRB': 'üá∑üá∏', 'GUI': 'üá¨üá≥',
  'KOR': 'üá∞üá∑', 'SWE': 'üá∏üá™', 'CRO': 'üá≠üá∑', 'DEN': 'üá©üá∞', 'TUR': 'üáπüá∑',
  // Noms complets (pour compatibilit√© avec la BDD)
  'FRANCE': 'üá´üá∑', 'SPAIN': 'üá™üá∏', 'BRAZIL': 'üáßüá∑', 'ARGENTINA': 'üá¶üá∑',
  'GERMANY': 'üá©üá™', 'ENGLAND': 'üá¨üáß', 'PORTUGAL': 'üáµüáπ', 'ITALY': 'üáÆüáπ',
  'NETHERLANDS': 'üá≥üá±', 'BELGIUM': 'üáßüá™', 'NORWAY': 'üá≥üá¥', 'EGYPT': 'üá™üá¨',
  'NIGERIA': 'üá≥üá¨', 'CANADA': 'üá®üá¶', 'CHILE': 'üá®üá±',
  'UKRAINE': 'üá∫üá¶', 'POLAND': 'üáµüá±', 'SERBIA': 'üá∑üá∏', 'GUINEA': 'üá¨üá≥',
  'SOUTH KOREA': 'üá∞üá∑', 'KOREA': 'üá∞üá∑', 'SWEDEN': 'üá∏üá™', 'CROATIA': 'üá≠üá∑', 'DENMARK': 'üá©üá∞',
  'MOROCCO': 'üá≤üá¶', 'SENEGAL': 'üá∏üá≥', 'IVORY COAST': 'üá®üáÆ', 'CAMEROON': 'üá®üá≤',
  'ALGERIA': 'üá©üáø', 'TUNISIA': 'üáπüá≥', 'MALI': 'üá≤üá±', 'BURKINA FASO': 'üáßüá´',
  'URUGUAY': 'üá∫üáæ', 'COLOMBIA': 'üá®üá¥', 'ECUADOR': 'üá™üá®', 'PARAGUAY': 'üáµüáæ',
  'PERU': 'üáµüá™', 'VENEZUELA': 'üáªüá™', 'BOLIVIA': 'üáßüá¥',
  'MEXICO': 'üá≤üáΩ', 'COSTA RICA': 'üá®üá∑', 'JAPAN': 'üáØüáµ', 'AUSTRALIA': 'üá¶üá∫',
  'IRAN': 'üáÆüá∑', 'SAUDI ARABIA': 'üá∏üá¶', 'GHANA': 'üá¨üá≠', 'SWITZERLAND': 'üá®üá≠',
  'AUSTRIA': 'üá¶üáπ', 'CZECH REPUBLIC': 'üá®üáø', 'TURKEY': 'üáπüá∑', 'RUSSIA': 'üá∑üá∫',
  'SCOTLAND': 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø', 'WALES': 'üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø', 'NORTHERN IRELAND': 'üá¨üáß',
  'REPUBLIC OF IRELAND': 'üáÆüá™', 'IRELAND': 'üáÆüá™', 'SLOVAKIA': 'üá∏üá∞',
  'SLOVENIA': 'üá∏üáÆ', 'ROMANIA': 'üá∑üá¥', 'HUNGARY': 'üá≠üá∫', 'GREECE': 'üá¨üá∑',
  'BOSNIA': 'üáßüá¶', 'BOSNIA AND HERZEGOVINA': 'üáßüá¶', 'ALBANIA': 'üá¶üá±',
  'NORTH MACEDONIA': 'üá≤üá∞', 'MACEDONIA': 'üá≤üá∞', 'MONTENEGRO': 'üá≤üá™',
  'FINLAND': 'üá´üáÆ', 'ICELAND': 'üáÆüá∏', 'LUXEMBOURG': 'üá±üá∫',
  'CAPE VERDE': 'üá®üáª', 'GABON': 'üá¨üá¶', 'CONGO': 'üá®üá¨', 'BENIN': 'üáßüáØ',
  'TOGO': 'üáπüá¨', 'ZIMBABWE': 'üáøüáº', 'SOUTH AFRICA': 'üáøüá¶',
  'COMOROS': 'üá∞üá≤', 'EQUATORIAL GUINEA': 'üá¨üá∂', 'GAMBIA': 'üá¨üá≤',
  // Noms en fran√ßais (avec accents)
  'BR√âSIL': 'üáßüá∑', 'CAMEROUN': 'üá®üá≤', 'ALG√âRIE': 'üá©üáø',
  'ESPAGNE': 'üá™üá∏', 'ALLEMAGNE': 'üá©üá™', 'ANGLETERRE': 'üá¨üáß',
  'ITALIE': 'üáÆüáπ', 'PAYS-BAS': 'üá≥üá±', 'BELGIQUE': 'üáßüá™',
  'MAROC': 'üá≤üá¶', 'S√âN√âGAL': 'üá∏üá≥', "C√îTE D'IVOIRE": 'üá®üáÆ',
  'TUNISIE': 'üáπüá≥', '√âGYPTE': 'üá™üá¨', 'NIG√âRIA': 'üá≥üá¨',
  'TURQUIE': 'üáπüá∑',
};

function getCountryFlag(countryCode: string | null | undefined): string {
  if (!countryCode) return 'üè≥Ô∏è';
  const normalized = countryCode.trim().toUpperCase();
  return COUNTRY_FLAGS[normalized] || 'üè≥Ô∏è';
}


export function Top10() {
  const location = useLocation();
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(location.search);
  const gameMode = searchParams.get('mode') || 'solo';
  const playersParam = searchParams.get('players') || '';
  
  // R√©cup√©rer les infos du d√©fi depuis le state de navigation
  const navigationState = location.state as { challengeId?: string; questionId?: string; isChallengeMode?: boolean } | null;
  const existingChallengeId = navigationState?.challengeId;
  const forcedQuestionId = navigationState?.questionId;
  const isPlayingExistingChallenge = navigationState?.isChallengeMode || false;
  
  // Extraire les IDs des joueurs √† d√©fier
  const challengedPlayerIds = playersParam ? playersParam.split(',').filter(id => id.trim()) : [];
  const isMultiplayerChallenge = gameMode === 'multijoueur' && challengedPlayerIds.length > 0;

  // Challenge hook
  const { challenge, isChallengeMode, completeChallenge } = useChallenge();

  // S√©lecteur de question
  const [selectedQuestion, setSelectedQuestion] = useState<string>(forcedQuestionId || "");
  const [availableQuestions, setAvailableQuestions] = useState<Array<{id: string, title: string}>>([]);
  const [questionsLoading, setQuestionsLoading] = useState<boolean>(true);
  const [questionsError, setQuestionsError] = useState<string | null>(null);

  // Auth
  const [userId, setUserId] = useState<string | null>(null);
  
  // √âtat pour suivre si les d√©fis ont √©t√© cr√©√©s
  const [createdChallenges, setCreatedChallenges] = useState<string[]>([]);
  const challengesCreatedRef = useRef(false);
  useEffect(() => {
    // Essayer d'abord l'API Supabase
    supabase.auth.getSession().then(({ data }) => {
      if (data.session?.user?.id) {
        setUserId(data.session.user.id);
      } else {
        // Fallback vers localStorage
        const storedToken = localStorage.getItem('sb-qahbsyolfvujrpblnrvy-auth-token');
        if (storedToken) {
          try {
            const tokenData = JSON.parse(storedToken);
            if (tokenData.user?.id) {
              setUserId(tokenData.user.id);
              console.log("üîç userId r√©cup√©r√© depuis localStorage:", tokenData.user.id);
            }
          } catch (err) {
            console.error("Erreur parsing localStorage pour userId:", err);
          }
        }
      }
    });
    
    const { data: sub } = supabase.auth.onAuthStateChange((_e, session) => {
      setUserId(session?.user?.id ?? null);
    });
    return () => sub.subscription.unsubscribe();
  }, []);

  // Services
  const cerisesService = new CerisesService();
  const multiplayerChallengesService = new MultiplayerChallengesService();
  
  // Cerises state
  const [userCerises, setUserCerises] = useState<number>(0);
  const [cerisesEarned, setCerisesEarned] = useState<number>(0);
  const cerisesAddedRef = useRef(false); // Flag pour √©viter les ajouts multiples

  // UI / Game state
  const [title, setTitle] = useState("Top 10");
  const [loading, setLoading] = useState(false);
  const [loadError, setLoadError] = useState<string | null>(null);
  const [gameStarted, setGameStarted] = useState(false);

  const [timeLeft, setTimeLeft] = useState(60);
  const [score, setScore] = useState(0);
  const [streak, setStreak] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);
  const [feedback, setFeedback] = useState<Feedback | null>(null);

  // Donn√©es th√®me
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [validSet, setValidSet] = useState<Set<string>>(new Set());
  const [allValidAnswers, setAllValidAnswers] = useState<ThemeAnswerRow[]>([]);
  
  // üéØ Syst√®me de pr√©visualisation avec flou
  const [foundAnswers, setFoundAnswers] = useState<Set<string>>(new Set());

  // Partie + leaderboard
  const [gameId, setGameId] = useState<string | null>(null);
  const [leaderboard, setLeaderboard] = useState<LeaderboardRow[]>([]);

  const gameOver = timeLeft <= 0 || answers.length >= 10;
  const replayBtnRef = useRef<HTMLButtonElement | null>(null);

  // Load user cerises
  useEffect(() => {
    if (!userId) return;
    
    const loadUserCerises = async () => {
      try {
        const balance = await cerisesService.getUserCerises(userId);
        setUserCerises(balance);
      } catch (error) {
        console.error('Failed to load user cerises:', error);
      }
    };
    
    loadUserCerises();
  }, [userId]);

  // Cr√©er automatiquement UN d√©fi multi-joueurs
  useEffect(() => {
    if (!userId || !isMultiplayerChallenge || challengesCreatedRef.current || challengedPlayerIds.length === 0) {
      return;
    }

    const createMultiplayerChallenge = async () => {
      console.log('üéØ Cr√©ation d\'un d√©fi multi-joueurs avec:', challengedPlayerIds);
      
      try {
        // Date d'expiration : 48 heures √† partir de maintenant
        const expiresAt = new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString();
        
        // Cr√©er UN SEUL d√©fi avec tous les participants
        const challenge = await multiplayerChallengesService.createChallenge(
          userId,
          challengedPlayerIds,  // Tableau de tous les IDs des participants
          'TOP10',
          expiresAt,
          {
            questionId: selectedQuestion || undefined,
            minParticipants: 2,
            maxParticipants: challengedPlayerIds.length + 1 // cr√©ateur + invit√©s
          }
        );
        
        setCreatedChallenges([challenge.id]);
        challengesCreatedRef.current = true;
        
        console.log(`üéâ D√©fi multi-joueurs cr√©√© avec succ√®s !`);
        console.log(`   ID: ${challenge.id}`);
        console.log(`   Participants: ${challenge.participants?.length || 0}`);
        
        // Afficher les participants
        challenge.participants?.forEach(p => {
          console.log(`   - ${p.user?.pseudo || 'Inconnu'} (${p.status})`);
        });
      } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du d√©fi:', error);
      }
    };

    createMultiplayerChallenge();
  }, [userId, isMultiplayerChallenge, challengedPlayerIds, selectedQuestion]);

  // Load available questions
  useEffect(() => {
    const loadQuestions = async () => {
      try {
        setQuestionsLoading(true);
        setQuestionsError(null);
        console.log("Chargement des questions disponibles...");
        
        console.log("Requ√™te vers l'API...");
        console.log("üîç √âtape 1: V√©rification auth...");
        
        // V√©rifier l'√©tat de l'authentification - utiliser localStorage directement
        console.log("üîç √âtape 2: V√©rification auth via localStorage...");
        
        let user = null;
        const storedToken = localStorage.getItem('sb-qahbsyolfvujrpblnrvy-auth-token');
        if (storedToken) {
          try {
            const tokenData = JSON.parse(storedToken);
            console.log("üîç Token data:", tokenData);
            
            if (tokenData.currentSession?.user) {
              user = tokenData.currentSession.user;
              console.log("üîç Utilisateur trouv√© dans localStorage:", user.id);
            } else if (tokenData.user) {
              user = tokenData.user;
              console.log("üîç Utilisateur trouv√© dans localStorage (format alternatif):", user.id);
            }
          } catch (parseErr) {
            console.error("Erreur parsing localStorage:", parseErr);
          }
        }
        
        if (!user) {
          console.error("Utilisateur non trouv√© dans localStorage");
          setQuestionsError("Vous devez √™tre connect√© pour acc√©der aux questions");
          setQuestionsLoading(false);
          return;
        }
        
        console.log("üîç √âtape 4: Appel API questions via REST (mode anonyme)...");
        
        // Utiliser l'API REST en mode anonyme (sans authentification)
        const headers = {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFhaGJzeW9sZnZ1anJwYmxucnZ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjY3NTQsImV4cCI6MjA3NTAwMjc1NH0.R_5UPLhgDXW1IA7oGpUE7VB-1OFq-Tx7CNrOPJZ1XrA',
          'Content-Type': 'application/json'
        };

        const response = await fetch(`https://qahbsyolfvujrpblnrvy.supabase.co/rest/v1/questions?select=*&limit=10`, {
          method: 'GET',
          headers
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const allQuestions = await response.json();
          
        console.log("üîç √âtape 5: R√©sultat API questions:", { allQuestions: allQuestions?.length });

        if (allQuestions) {
          console.log("Toutes les questions trouv√©es:", allQuestions);
          
          // Filtrer les questions TOP 10 c√¥t√© client
          const top10Questions = allQuestions.filter((q: any) => {
            // V√©rifier game_type_id
            if (q.game_type_id === 1) return true;
            
            // V√©rifier game_type string
            if (q.game_type === 'top10' || q.game_type === 'TOP10') return true;
            
            // V√©rifier le contenu (en s'assurant que c'est une string)
            if (q.content && typeof q.content === 'string' && q.content.toLowerCase().includes('top 10')) return true;
            if (q.title && typeof q.title === 'string' && q.title.toLowerCase().includes('top 10')) return true;
            
            return false;
          });
          
          console.log("Questions TOP 10 filtr√©es:", top10Questions);
          
          // Adapter les donn√©es selon la structure r√©elle de la table
          const adaptedQuestions = top10Questions.map((q: any) => {
            // Utiliser content.question comme titre principal
            let title = `Question ${q.id}`; // Fallback par d√©faut
            
            if (q.content && q.content.question && typeof q.content.question === 'string') {
              title = q.content.question;
            } else if (q.content && typeof q.content === 'string') {
              title = q.content;
            } else if (q.title && typeof q.title === 'string') {
              title = q.title;
            } else if (q.name && typeof q.name === 'string') {
              title = q.name;
            }
            
            return {
              id: q.id,
              title: title
            };
          });
          
          console.log("Questions adapt√©es:", adaptedQuestions);
          setAvailableQuestions(adaptedQuestions);
          if (adaptedQuestions.length > 0 && !selectedQuestion) {
            setSelectedQuestion(adaptedQuestions[0].id);
          }
          setQuestionsLoading(false);
        }
      } catch (error: any) {
        console.error('Erreur chargement questions:', error);
        console.error('D√©tails de l\'erreur:', error);
        if (error.message.includes('Session expired') || error.message.includes('not authenticated')) {
          setQuestionsError("Session expir√©e, veuillez vous reconnecter");
        } else {
          setQuestionsError(`Erreur de chargement: ${error.message}`);
        }
        setQuestionsLoading(false);
      }
    };

    loadQuestions();
  }, []);

  // Timer
  useEffect(() => {
    if (loading || gameOver || !gameStarted) return;
    const id = setInterval(() => {
      setTimeLeft((t) => {
        // Si le temps arrive √† 1 (va passer √† 0), ajouter les cerises
        if (t === 1 && userId && !cerisesAddedRef.current) {
          cerisesAddedRef.current = true;
          const cerisesToAdd = Math.max(1, score);
          console.log(`‚è±Ô∏è Temps √©coul√© ! Ajout de ${cerisesToAdd} cerises`);
          
          cerisesService.addCerises(userId, cerisesToAdd)
            .then(() => {
              setCerisesEarned(cerisesToAdd);
              return cerisesService.getUserCerises(userId);
            })
            .then((newBalance) => {
              console.log(`üí∞ Nouveau solde cerises: ${newBalance}`);
              
              // Notifier le header de la mise √† jour AVANT setUserCerises
              console.log('üì¢ √âmission de l\'√©v√©nement cerises-updated:', { balance: newBalance, added: cerisesToAdd });
              const event = new CustomEvent('cerises-updated', { 
                detail: { balance: newBalance, added: cerisesToAdd } 
              });
              window.dispatchEvent(event);
              console.log('‚úÖ √âv√©nement cerises-updated √©mis');
              
              // Mettre √† jour l'√©tat local en dernier
              setUserCerises(newBalance);
            })
            .catch((error) => {
              console.error('‚ùå Erreur ajout cerises:', error);
              cerisesAddedRef.current = false;
            });
        }
        return t > 0 ? t - 1 : 0;
      });
    }, 1000);
    return () => clearInterval(id);
  }, [loading, gameOver, gameStarted, userId, score, cerisesService]);

  // üéØ D√©flouter tous les joueurs √† la fin de la partie
  useEffect(() => {
    if (gameOver && allValidAnswers.length > 0) {
      // Ajouter tous les joueurs √† foundAnswers pour les d√©flouter
      const allAnswers = allValidAnswers.map(answer => answer.answer_norm);
      setFoundAnswers(new Set(allAnswers));
    }
  }, [gameOver, allValidAnswers]);

  // Chargement th√®me bas√© sur la question s√©lectionn√©e
  useEffect(() => {
    if (!gameStarted || !selectedQuestion) return;
    
    let cancelled = false;

    async function load() {
      try {
        setLoading(true);
        setLoadError(null);

        // Utiliser l'API REST en mode anonyme
        console.log("R√©cup√©ration de la question s√©lectionn√©e:", selectedQuestion);
        
        const headers = {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFhaGJzeW9sZnZ1anJwYmxucnZ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjY3NTQsImV4cCI6MjA3NTAwMjc1NH0.R_5UPLhgDXW1IA7oGpUE7VB-1OFq-Tx7CNrOPJZ1XrA',
          'Content-Type': 'application/json'
        };
        
        // 1) R√©cup√©rer la question s√©lectionn√©e
        const questionResponse = await fetch(`https://qahbsyolfvujrpblnrvy.supabase.co/rest/v1/questions?select=*&id=eq.${selectedQuestion}`, {
          method: 'GET',
          headers
        });

        if (!questionResponse.ok) {
          throw new Error(`HTTP ${questionResponse.status}: ${questionResponse.statusText}`);
        }

        const questions = await questionResponse.json();
        if (!questions || questions.length === 0) {
          throw new Error('Question s√©lectionn√©e introuvable');
        }

        const question = questions[0];
        setTitle(question.title);
        console.log("Question trouv√©e:", question);
        if (cancelled) return;

        // 2) R√©cup√©rer les r√©ponses de cette question avec jointure sur players
        const answersResponse = await fetch(`https://qahbsyolfvujrpblnrvy.supabase.co/rest/v1/question_answers?select=*,players(name,nationality)&question_id=eq.${question.id}&order=ranking.asc`, {
          method: 'GET',
          headers
        });

        if (!answersResponse.ok) {
          throw new Error(`HTTP ${answersResponse.status}: ${answersResponse.statusText}`);
        }

        const answersData = await answersResponse.json();
        if (!answersData || answersData.length === 0) {
          throw new Error('Aucune r√©ponse trouv√©e pour cette question');
        }

        console.log("R√©ponses trouv√©es:", answersData.length);
        console.log("Structure des r√©ponses:", answersData[0]); // Voir la structure de la premi√®re r√©ponse
        console.log("Propri√©t√©s de la premi√®re r√©ponse:", Object.keys(answersData[0])); // Voir les cl√©s disponibles
        console.log("Toutes les r√©ponses:", answersData); // Voir toutes les r√©ponses
        
        // üîç DEBUG - V√©rifier si la relation players existe
        console.log("üîç DEBUG NATIONALIT√â - Premi√®re r√©ponse compl√®te:", JSON.stringify(answersData[0], null, 2));
        console.log("üîç DEBUG NATIONALIT√â - players dans premi√®re r√©ponse:", answersData[0].players);
        console.log("üîç DEBUG NATIONALIT√â - nationality:", answersData[0].players?.nationality);

        // Traitement des r√©ponses
        const list = answersData.map((r: any, index: number) => {
          const playerName = r.players?.name || 'Joueur inconnu';
          const result = {
            answer: playerName,
            answer_norm: normalize(playerName), // ‚úÖ Utiliser la m√™me fonction normalize
            ranking: r.ranking,
            points: r.points || 0,
            players: {
              nationality: r.players?.nationality || 'Unknown'
            }
          };
          
          if (index === 0) {
            console.log(`üîç DEBUG NATIONALIT√â - Transformation r√©ponse 1:`, {
              input: r,
              output: result,
              hasPlayers: !!r.players,
              hasNationality: !!r.players?.nationality
            });
          }
          
          return result;
        }) as ThemeAnswerRow[];
        
        console.log("R√©ponses trait√©es:", list); // Voir les r√©ponses apr√®s traitement
        console.log("üîç DEBUG NATIONALIT√â - Premi√®re r√©ponse trait√©e:", list[0]); // Voir la premi√®re r√©ponse trait√©e
        console.log("üîç DEBUG NATIONALIT√â - Flag qui sera affich√©:", getCountryFlag(list[0]?.players?.nationality));
        console.log("allValidAnswers sera d√©fini avec:", list.length, "r√©ponses");
        setValidSet(new Set(list.map((r) => r.answer_norm)));
        setAllValidAnswers(list); // Stocker toutes les r√©ponses pour le r√©capitulatif

        // 3) Suggestions = tous les joueurs de la base via API REST
        try {
          const playersResponse = await fetch(`https://qahbsyolfvujrpblnrvy.supabase.co/rest/v1/players?select=name&order=name&limit=1000`, {
            method: 'GET',
            headers
          });

          if (playersResponse.ok) {
            const playersData = await playersResponse.json();
            setSuggestions((playersData ?? []).map((p: any) => p.name));
          } else {
            console.error("Erreur recherche joueurs:", playersResponse.status);
            // En cas d'erreur, utiliser les r√©ponses de la question comme suggestions
            setSuggestions(list.map(p => p.answer));
          }
        } catch (error) {
          console.error("Erreur recherche joueurs:", error);
          // En cas d'erreur, utiliser les r√©ponses de la question comme suggestions
          setSuggestions(list.map(p => p.answer));
        }

        // 4) Reset UI
        setTimeLeft(60);
        setScore(0);
        setStreak(0);
        setAnswers([]);
        setFeedback(null);

        // 5) Initialiser le jeu (sans sauvegarde en base pour l'instant)
        const gameId = `game_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        if (!cancelled) setGameId(gameId);

        // 6) Leaderboard vide pour l'instant (pas de table games)
        if (!cancelled) setLeaderboard([]);
      } catch (e: any) {
        if (!cancelled) setLoadError(e.message ?? String(e));
      } finally {
        if (!cancelled) setLoading(false);
      }
    }

    load();
    return () => {
      cancelled = true;
    };
  }, [gameStarted, selectedQuestion, userId]);

  // Scoring
  const BASE_GOOD = 15;
  const BAD_PENALTY = 5;
  const BONUS_BY_STREAK: Record<number, number> = { 3: 10, 6: 15, 9: 10, 10: 15 };

  // Validation + enregistrement
  const onSelectAnswer = async (value: string) => {
    if (loading || gameOver || !gameId) return;

    const norm = normalize(value);
    if (!norm) return;

    // Debug: afficher les informations de matching
    console.log("üîç Debug matching:");
    console.log("- Input:", value);
    console.log("- Normalis√©:", norm);
    console.log("- ValidSet size:", validSet.size);
    console.log("- ValidSet contient:", validSet.has(norm));
    console.log("- ValidSet preview:", Array.from(validSet).slice(0, 5));

    // Doublon UI
    if (answers.some((a) => normalize(a) === norm)) {
      setFeedback({ type: "info", msg: "D√©j√† trouv√©" });
      return;
    }

    if (validSet.has(norm)) {
      const nextStreak = streak + 1;
      const bonus = BONUS_BY_STREAK[nextStreak] ?? 0;
      const delta = BASE_GOOD + bonus;

      // UI
      setAnswers((prev) => [...prev, value]);
      setScore((prev) => prev + delta);
      setStreak(nextStreak);
      setFeedback({ type: "ok", msg: `Bonne r√©ponse +${delta}` });
      
      // üéØ Ajouter √† la liste des r√©ponses trouv√©es pour le d√©floutage
      setFoundAnswers((prev) => new Set(Array.from(prev).concat(norm)));

      // DB
      try {
        await supabase.from("submissions").insert({
          game_id: gameId,
          user_id: userId,
          raw_input: value,
          normalized: norm,
          is_correct: true,
          score_delta: delta,
        });
      } catch (e) {
        console.error("submitAnswer (good) failed:", e);
      }
    } else {
      const delta = -BAD_PENALTY;

      // UI
      setStreak(0);
      setScore((prev) => Math.max(0, prev + delta));
      setFeedback({ type: "error", msg: `Mauvaise r√©ponse ${delta}` });

      // DB
      try {
        await supabase.from("submissions").insert({
          game_id: gameId,
          user_id: userId,
          raw_input: value,
          normalized: norm,
          is_correct: false,
          score_delta: delta,
        });
      } catch (e) {
        console.error("submitAnswer (bad) failed:", e);
      }
    }
  };

  // Cl√¥ture de partie + refresh leaderboard
  useEffect(() => {
    if (!gameOver || !gameId) return;
    
    let hasRun = false;
    
    (async () => {
      if (hasRun) return;
      hasRun = true;

      try {
        console.log("Ending game:", gameId, "Score:", score, "Answers:", answers.length);
        
        // Sauvegarde d√©sactiv√©e - pas de table games
        console.log("Partie termin√©e - Score final:", score, "R√©ponses:", answers.length);

        // Leaderboard d√©sactiv√© - pas de table games
        console.log("Leaderboard non disponible - pas de table games");
        setLeaderboard([]);
      } catch (e) {
        console.error("endGame/leaderboard failed:", e);
      }
    })();
  }, [gameOver, gameId, score, answers.length, selectedQuestion]);

  // Handle challenge completion at game end (cerises are now handled in timer)
  useEffect(() => {
    if (!gameOver || !gameStarted) return;
    
    const handleGameEnd = async () => {
      try {
        // Complete challenge if in challenge mode (ancien syst√®me)
        if (isChallengeMode && completeChallenge) {
          const timeTaken = 60 - timeLeft;
          const success = await completeChallenge(score, timeTaken);
          if (success) {
            console.log('‚úÖ Challenge completed successfully!');
          }
        }

        // Enregistrer les r√©sultats pour le d√©fi multi-joueurs
        const activeChallengeId = existingChallengeId || (createdChallenges.length > 0 ? createdChallenges[0] : null);
        
        if ((isMultiplayerChallenge || isPlayingExistingChallenge) && activeChallengeId && userId) {
          console.log('üíæ Enregistrement des r√©sultats du d√©fi multi-joueurs...');
          const timeTaken = 60 - timeLeft;
          
          try {
            // Enregistrer le score du joueur actuel
            await multiplayerChallengesService.playChallenge(
              activeChallengeId,
              userId,
              score,
              timeTaken
            );
            console.log(`‚úÖ Score enregistr√©: ${score} points en ${timeTaken}s`);
            
            // R√©cup√©rer l'√©tat du d√©fi pour voir s'il est termin√©
            const challengeDetails = await multiplayerChallengesService.getChallengeById(activeChallengeId);
            console.log(`üìä √âtat du d√©fi:`);
            console.log(`   Status: ${challengeDetails.status}`);
            console.log(`   Participants: ${challengeDetails.participants?.length || 0}`);
            
            const completedCount = challengeDetails.participants?.filter(p => p.status === 'completed').length || 0;
            const totalParticipants = challengeDetails.participants?.length || 0;
            console.log(`   Termin√©s: ${completedCount}/${totalParticipants}`);
            
            // Rediriger vers la page des r√©sultats apr√®s un court d√©lai
            setTimeout(() => {
              console.log(`üéØ Redirection vers /challenge/${activeChallengeId}`);
              navigate(`/challenge/${activeChallengeId}`);
            }, 2000);
          } catch (error) {
            console.error(`‚ùå Erreur enregistrement r√©sultat:`, error);
          }
        }
      } catch (error) {
        console.error('‚ùå Failed to handle game end:', error);
      }
    };
    
    handleGameEnd();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [gameOver]);

  // Couleur timer (utilis√©e dans le JSX)
  // const timeColor = () => {
  //   if (timeLeft <= 10) return "text-red-600";
  //   if (timeLeft <= 20) return "text-yellow-600";
  //   return "text-green-700";
  // };

  // Fonction pour v√©rifier si une r√©ponse a √©t√© trouv√©e
  const isAnswerFound = (answerNorm: string) => {
    return answers.some(answer => normalize(answer) === answerNorm);
  };

  // üéØ Helper pour v√©rifier si une r√©ponse doit √™tre d√©flout√©e
  const isAnswerUnblurred = (answerNorm: string) => {
    return foundAnswers.has(answerNorm);
  };

  // Erreur
  if (loadError) {
    return (
      <div className="p-6 space-y-3">
        <h1 className="text-2xl font-bold">Erreur de chargement</h1>
        <p className="text-red-600">{loadError}</p>
        <p className="text-sm text-gray-600">
          Assurez-vous que le th√®me existe dans Supabase avec le slug correspondant.
        </p>
        <button
          onClick={() => {
            setGameStarted(false);
            setLoadError(null);
          }}
          className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
        >
          Retour
        </button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white relative p-4">
      {/* Motifs ballon en filigrane */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute top-10 left-10 w-20 h-20 bg-primary rounded-full"></div>
        <div className="absolute top-32 right-16 w-16 h-16 bg-primary rounded-full"></div>
        <div className="absolute bottom-20 left-20 w-12 h-12 bg-primary rounded-full"></div>
        <div className="absolute bottom-32 right-10 w-24 h-24 bg-primary rounded-full"></div>
        <div className="absolute top-1/2 left-1/4 w-8 h-8 bg-primary rounded-full"></div>
        <div className="absolute top-1/3 right-1/3 w-14 h-14 bg-primary rounded-full"></div>
      </div>

      <div className="max-w-4xl mx-auto space-y-6 relative z-10">
        {/* Header avec s√©lecteurs */}
        <header className="space-y-6">
          <div className="text-center">
            <h1 className="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary mb-2">
              ‚öΩ {title} ‚öΩ
            </h1>
            <p className="text-lg text-text/70 font-medium">Testez vos connaissances footballistiques !</p>
            
            {/* Challenge mode indicator */}
            {isChallengeMode && challenge && (
              <div className="mt-4 bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-6 py-3 rounded-xl shadow-lg">
                <div className="flex items-center justify-center gap-2">
                  <span className="text-2xl">‚öîÔ∏è</span>
                  <div>
                    <div className="font-bold">Mode D√©fi</div>
                    <div className="text-sm opacity-90">
                      D√©fi contre {challenge.challenger?.pseudo || challenge.challenged?.pseudo || 'Adversaire'}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        
        {/* S√©lecteur de question */}
        <div className="bg-white rounded-2xl shadow-xl p-6 space-y-4 border border-accent-light">
          <div>
            <label className="block text-sm font-medium text-text mb-2">üéØ Choisir une question</label>
            
            {questionsLoading && (
              <div className="w-full p-3 rounded-xl border-2 border-primary/20 bg-accent text-center">
                <span className="text-primary font-medium">‚è≥ Chargement des questions...</span>
              </div>
            )}
            
            {questionsError && (
              <div className="w-full p-3 rounded-xl border-2 border-red-200 bg-red-50 text-center">
                <span className="text-red-600 font-medium">‚ùå {questionsError}</span>
              </div>
            )}
            
            {!questionsLoading && !questionsError && (
              <>
                {isPlayingExistingChallenge && forcedQuestionId && (
                  <div className="w-full p-3 rounded-xl border-2 border-blue-300 bg-blue-50 text-center mb-2">
                    <span className="text-blue-700 font-medium">
                      üéØ D√©fi impos√© : vous devez jouer √† la question s√©lectionn√©e par le cr√©ateur du d√©fi
                    </span>
                  </div>
                )}
                <select
                  value={selectedQuestion}
                  onChange={(e) => setSelectedQuestion(e.target.value)}
                  disabled={(gameStarted && !gameOver) || isPlayingExistingChallenge}
                  className="w-full p-3 rounded-xl border-2 border-primary/20 bg-accent font-medium text-text focus:outline-none focus:border-primary transition-colors duration-200 disabled:opacity-50"
                >
                  <option value="">S√©lectionnez une question...</option>
                  {availableQuestions.map((question) => (
                    <option key={question.id} value={question.id}>
                      {question.title}
                    </option>
                  ))}
                </select>
              </>
            )}
          </div>

          {/* Bouton Lancer la partie */}
          {!gameStarted && selectedQuestion && !questionsLoading && !questionsError && (
            <button
              onClick={() => {
                setGameStarted(true);
                cerisesAddedRef.current = false; // R√©initialiser le flag pour la nouvelle partie
              }}
              className="w-full px-6 py-4 rounded-2xl bg-primary hover:bg-primary-dark text-white text-xl font-black transform hover:scale-105 transition-all shadow-xl"
            >
              üöÄ LANCER LA PARTIE üöÄ
            </button>
          )}

          {!selectedQuestion && !questionsLoading && !questionsError && (
            <p className="text-sm text-center text-gray-500">
              Veuillez s√©lectionner une question pour commencer
            </p>
          )}

          {gameStarted && !gameOver && (
            <p className="text-xs text-center text-primary font-semibold">
              üîí Question verrouill√©e pendant la partie
            </p>
          )}
        </div>
      </header>

      {/* Score et compteurs - Visible seulement si partie lanc√©e */}
      {gameStarted && (
        <div className="bg-white rounded-3xl shadow-2xl p-4 border border-accent-light">
          <div className="flex items-center justify-between gap-2">
            <div className="flex items-center gap-2 flex-wrap">
              {/* Timer */}
              <div className={`px-4 py-2 rounded-2xl font-black text-lg shadow-lg ${
                timeLeft <= 10 
                  ? "bg-primary text-white animate-pulse" 
                  : timeLeft <= 20
                  ? "bg-secondary text-text"
                  : "bg-accent text-text"
              }`}>
                {loading ? "‚è≥" : `‚è±Ô∏è ${timeLeft}s`}
              </div>

              {/* Streak */}
              <div className="px-4 py-2 rounded-2xl bg-primary text-white font-black text-lg shadow-lg">
                üî• {streak}
              </div>

              {/* R√©ponses */}
              <div className="px-4 py-2 rounded-2xl bg-secondary text-text font-black text-lg shadow-lg">
                ‚úÖ {answers.length}/10
              </div>
            </div>

            {/* Score cerises */}
            <div className="px-6 py-2 rounded-2xl bg-primary text-white font-black text-2xl shadow-lg">
              üçí {score}
            </div>
          </div>
        </div>
      )}

      {/* Saisie - Visible seulement si partie lanc√©e */}
      {gameStarted && (
        <div className="bg-white/95 backdrop-blur rounded-3xl shadow-2xl p-6">
          <AutocompleteInput
            suggestions={suggestions}
            onSelect={onSelectAnswer}
            disabled={loading || gameOver}
            className="flex-1"
            placeholder={loading ? "‚è≥ Chargement..." : "üîç Tape au moins 3 caract√®res..."}
            minChars={3}
          />
        </div>
      )}

      {/* Feedback */}
      {gameStarted && feedback && (
        <div className={`rounded-2xl p-4 text-center font-black text-lg shadow-lg ${
          feedback.type === "ok"
            ? "bg-gradient-to-r from-green-400 to-emerald-500 text-white"
            : feedback.type === "error"
            ? "bg-gradient-to-r from-red-400 to-rose-500 text-white animate-shake"
            : "bg-gradient-to-r from-blue-400 to-cyan-500 text-white"
        }`}>
          {feedback.msg}
        </div>
      )}

      {/* R√©ponses trouv√©es */}
      {gameStarted && answers.length > 0 && (
        <div className="bg-white rounded-3xl shadow-2xl p-6 border border-accent-light">
          <h3 className="font-black text-primary mb-3 text-lg">üéØ Tes r√©ponses :</h3>
          <div className="grid grid-cols-2 gap-2">
            {answers.map((a, i) => (
              <div key={i} className="bg-primary/10 border-2 border-red-600 rounded-xl px-4 py-2 font-bold text-primary flex items-center gap-2">
                <span className="text-lg">‚úÖ</span>
                <span>{a}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* üéØ Aper√ßu progressif des r√©ponses (pendant le jeu) */}
      {gameStarted && !gameOver && allValidAnswers.length > 0 && (
        <div className="bg-white rounded-3xl shadow-2xl p-6 border border-accent-light">
          <h3 className="font-black text-primary mb-3 text-lg">üëÄ Aper√ßu du d√©fi :</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Colonne gauche : joueurs 1-5 */}
            <div className="space-y-3">
              {allValidAnswers.slice(0, 5).map((answer, index) => {
                const unblurred = isAnswerUnblurred(answer.answer_norm);
                const flag = getCountryFlag(answer.players?.nationality);
                const statValue = answer.points || answer.goals || answer.assists || 0;
                const statUnit = 'points';
                
                return (
                  <div
                    key={index}
                    className="flex items-center gap-2 p-3 rounded-xl border-2 border-accent-light bg-white"
                  >
                    <span className="text-2xl font-bold text-primary">
                      {answer.ranking || (index + 1)}.
                    </span>
                    <span className="text-2xl">
                      {flag}
                    </span>
                    <span 
                      className={`font-bold text-text flex-1 transition-all duration-500 ${
                        unblurred ? "" : "blur-sm"
                      }`}
                    >
                      {answer.answer}
                    </span>
                    {statValue && (
                      <span className={`text-sm font-semibold text-text bg-accent px-2 py-1 rounded transition-all duration-500 ${
                        unblurred ? "" : "blur-sm"
                      }`}>
                        {statValue} {statUnit}
                      </span>
                    )}
                    {unblurred && (
                      <span className="text-primary text-lg">‚úÖ</span>
                    )}
                  </div>
                );
              })}
            </div>
            
            {/* Colonne droite : joueurs 6-10 */}
            <div className="space-y-3">
              {allValidAnswers.slice(5, 10).map((answer, index) => {
                const unblurred = isAnswerUnblurred(answer.answer_norm);
                const flag = getCountryFlag(answer.players?.nationality);
                const statValue = answer.points || answer.goals || answer.assists || 0;
                const statUnit = 'points';
                
                return (
                  <div
                    key={index + 5}
                    className="flex items-center gap-2 p-3 rounded-xl border-2 border-accent-light bg-white"
                  >
                    <span className="text-2xl font-bold text-primary">
                      {answer.ranking || (index + 6)}.
                    </span>
                    <span className="text-2xl">
                      {flag}
                    </span>
                    <span 
                      className={`font-bold text-text flex-1 transition-all duration-500 ${
                        unblurred ? "" : "blur-sm"
                      }`}
                    >
                      {answer.answer}
                    </span>
                    {statValue && (
                      <span className={`text-sm font-semibold text-text bg-accent px-2 py-1 rounded transition-all duration-500 ${
                        unblurred ? "" : "blur-sm"
                      }`}>
                        {statValue} {statUnit}
                      </span>
                    )}
                    {unblurred && (
                      <span className="text-primary text-lg">‚úÖ</span>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}

      {/* Fin de partie */}
      {gameOver && gameStarted && (
        <div className="bg-white rounded-3xl shadow-2xl p-6 text-center space-y-4 border border-accent-light">
          <div className="text-6xl mb-2">
            {answers.length >= 8 ? "üèÜ" : answers.length >= 4 ? "üëç" : "üí™"}
          </div>
          <p className="text-2xl font-black text-primary">
            {answers.length >= 8
              ? "L√âGENDE ! Tripl√© parfait ! üçíüçíüçí"
              : answers.length >= 4
              ? "Pas mal ! Encore un effort üí™"
              : "On se refait une partie ? üîÑ"}
          </p>
          <div className="text-4xl font-black text-primary">
            {score} points ! üéØ
          </div>
          
          {cerisesEarned > 0 && (
            <div className="bg-secondary rounded-2xl p-4 border-2 border-primary">
              <div className="text-2xl font-bold text-primary mb-2">
                üçí Cerises gagn√©es !
              </div>
              <div className="text-3xl font-black text-primary">
                +{cerisesEarned} cerises
              </div>
              <div className="text-sm text-primary/70 mt-1">
                Solde total: {userCerises} cerises
              </div>
            </div>
          )}

          {/* R√©capitulatif des r√©ponses */}
          <div className="bg-white rounded-3xl shadow-2xl p-6 text-left border border-accent-light">
            <h3 className="text-xl font-black text-gray-800 mb-4 text-center">
              üìã R√©capitulatif des r√©ponses
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-h-60 overflow-y-auto">
              {/* Colonne gauche : joueurs 1-5 */}
              <div className="space-y-3">
                {allValidAnswers.slice(0, 5).map((answer, index) => {
                  const found = isAnswerFound(answer.answer_norm);
                  const unblurred = isAnswerUnblurred(answer.answer_norm);
                  const flag = getCountryFlag(answer.players?.nationality);
                  const statValue = answer.points || answer.goals || answer.assists || 0;
                  const statUnit = 'points';
                  
                  return (
                    <div
                      key={index}
                      className={`flex items-center gap-2 p-3 rounded-xl border-2 transition-all ${
                        found
                          ? "bg-gradient-to-r from-green-100 to-emerald-100 border-green-400"
                          : "bg-gradient-to-r from-red-100 to-rose-100 border-red-400"
                      }`}
                    >
                      <span className="text-xl font-bold text-purple-600">
                        {answer.ranking || (index + 1)}.
                      </span>
                      <span className="text-2xl">
                        {flag}
                      </span>
                      <span className="text-2xl">
                        {found ? "‚úÖ" : "‚ùå"}
                      </span>
                      <span 
                        className={`font-bold flex-1 transition-all duration-500 ${
                          found ? "text-green-800" : "text-red-800"
                        } ${!unblurred ? "blur-sm" : ""}`}
                      >
                        {answer.answer}
                      </span>
                      {statValue && (
                        <span className={`text-xs font-semibold text-gray-600 bg-gray-100 px-2 py-1 rounded ${
                          !unblurred ? "blur-sm" : ""
                        }`}>
                          {statValue} {statUnit}
                        </span>
                      )}
                    </div>
                  );
                })}
              </div>
              
              {/* Colonne droite : joueurs 6-10 */}
              <div className="space-y-3">
                {allValidAnswers.slice(5, 10).map((answer, index) => {
                  const found = isAnswerFound(answer.answer_norm);
                  const unblurred = isAnswerUnblurred(answer.answer_norm);
                  const flag = getCountryFlag(answer.players?.nationality);
                  const statValue = answer.points || answer.goals || answer.assists || 0;
                  const statUnit = 'points';
                  
                  return (
                    <div
                      key={index + 5}
                      className={`flex items-center gap-2 p-3 rounded-xl border-2 transition-all ${
                        found
                          ? "bg-gradient-to-r from-green-100 to-emerald-100 border-green-400"
                          : "bg-gradient-to-r from-red-100 to-rose-100 border-red-400"
                      }`}
                    >
                      <span className="text-xl font-bold text-purple-600">
                        {answer.ranking || (index + 6)}.
                      </span>
                      <span className="text-2xl">
                        {flag}
                      </span>
                      <span className="text-2xl">
                        {found ? "‚úÖ" : "‚ùå"}
                      </span>
                      <span 
                        className={`font-bold flex-1 transition-all duration-500 ${
                          found ? "text-green-800" : "text-red-800"
                        } ${!unblurred ? "blur-sm" : ""}`}
                      >
                        {answer.answer}
                      </span>
                      {statValue && (
                        <span className={`text-xs font-semibold text-gray-600 bg-gray-100 px-2 py-1 rounded ${
                          !unblurred ? "blur-sm" : ""
                        }`}>
                          {statValue} {statUnit}
                        </span>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
            <div className="mt-4 text-center">
              <p className="text-sm text-gray-600 font-semibold">
                {answers.length}/{allValidAnswers.length} r√©ponses trouv√©es
              </p>
            </div>
          </div>

          <button
            ref={replayBtnRef}
            className="px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-black text-xl hover:from-purple-600 hover:to-pink-600 transform hover:scale-105 transition-all shadow-xl"
            onClick={() => {
              setGameStarted(false);
              setTimeLeft(60);
              setScore(0);
              setStreak(0);
              setAnswers([]);
              setFeedback(null);
              setGameId(null);
              setFoundAnswers(new Set()); // ‚úÖ R√©initialiser les r√©ponses trouv√©es pour reflouter
              replayBtnRef.current?.blur();
            }}
            disabled={loading}
          >
            üéÆ NOUVELLE PARTIE üéÆ
          </button>
        </div>
      )}

      {/* Leaderboard */}
      <section className="bg-white/95 backdrop-blur rounded-3xl shadow-2xl p-6">
        <h2 className="text-2xl font-black bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent mb-4 flex items-center gap-2">
          üèÜ HALL OF FAME üèÜ
        </h2>
        {leaderboard.length === 0 ? (
          <p className="text-center text-gray-500 font-semibold py-8">
            Aucun score pour l'instant... Sois le premier ! üöÄ
          </p>
        ) : (
          <div className="space-y-2">
            {leaderboard.map((row, idx) => (
              <div
                key={`${row.ended_at}-${idx}`}
                className={`flex items-center justify-between rounded-2xl px-4 py-3 ${
                  idx === 0 
                    ? "bg-gradient-to-r from-yellow-200 to-amber-200 border-2 border-yellow-400"
                    : idx === 1
                    ? "bg-gradient-to-r from-gray-200 to-slate-200 border-2 border-gray-400"
                    : idx === 2
                    ? "bg-gradient-to-r from-orange-200 to-amber-200 border-2 border-orange-400"
                    : "bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-purple-200"
                }`}
              >
                <div className="flex items-center gap-3">
                  <span className="text-2xl font-black">
                    {idx === 0 ? "ü•á" : idx === 1 ? "ü•à" : idx === 2 ? "ü•â" : `#${idx + 1}`}
                  </span>
                  <div>
                    <div className="font-black text-lg text-gray-800">{row.final_score} üçí</div>
                    <div className="text-xs text-gray-600 font-semibold">
                      {row.answers_count}/10 r√©ponses
                    </div>
                  </div>
                </div>
                <time className="text-xs text-gray-500 font-medium">
                  {new Date(row.ended_at).toLocaleDateString('fr-FR')}
                </time>
              </div>
            ))}
          </div>
        )}
      </section>
      </div>
    </div>
  );
}